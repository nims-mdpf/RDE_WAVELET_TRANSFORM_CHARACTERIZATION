[project]
name = "Wavelet Transform Characterization"
version = "1.0.0"

[tool.coverage.run]
omit = ["tests/*"]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
]

[tool.ruff]
line-length = 1000
lint.select = [
    "F",    # pyflakes
    "E",    # pycodestyle
    "W",    # pycodestyle warnings
    "I",    # isort
    "D",    # pydocstyle
    "N",    # pep8-naming
    "PL",   # Pylint,
    "C90",  # mccabe
    "UP",   # pyupgrade
    "ANN",  # flake8-annotations
    "S",    # flake8-bandit
    "B",    # flake8-bugbear
    "A",    # flake8-builtins
    "COM",  # flake8-commas
    "C4",   # flake8-comprehensions
    "DTZ",  # flake8-datetimez
    "EM",   # flake8-errmsg
    "FA",   # flake8-future-annotations
    "ISC",  # flake8-implicit-str-concat
    "ICN",  # flake8-import-conventions
    "INP",  # flake8-no-pep420
    "PIE",  # flake8-pie
    "T10",  # flake8-debugger
    "T20",  # flake8-print
    "PYI",  # flake8-pyi
    "RSE",  # flake8-raise
    "RET",  # flake8-return
    "SLF",  # flake8-self
    "SLOT", # flake8-slots
    "SIM",  # flake8-simplify
    "TID",  # flake8-tidy-imports
]
lint.ignore = [
    "E501",
    "D100",
    "D101",
    "D104",
    "D105",
    "D107",
    "D203",
    "D213",
    "N805",
    "PLR0913",
    "S307",
    "ANN002",
    "ANN003",
    "ANN204",
    "ANN401",
]
exclude = [
    "bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "tests",
    "stubs",
]

[tool.pyrefly]
untyped_def_behavior = "check-and-infer-return-type"
# use_untyped_imports = true # WARN pyproject.toml: Extra keys found in config: use_untyped_imports
ignore_missing_source = true
replace_imports_with_any = [
    "pandas.*",
    "numpy.*",
    "requests.*",
    "matplotlib.*",
    "scipy.*",
    "rdetoolkit.*",
]
# Set to false because our project rarely uses auto-generated code
# such as Protocol Buffers, Django ORM migrations, GraphQL code generation,
# or OpenAPI/Swagger generated code. We prefer to maintain consistent
# type checking across all source files.
ignore_errors_in_generated_code=false

# project_includes = ["**/*.py", "**/*.pyi"]
project_excludes = ["tests/**", "**/.[!/.]*", "**/__pycache__/**"]
python_version = "3.13"
python_platform = "linux"

[tool.pyrefly.errors]
bad-assignment = true
bad-argument-type = true
bad-argument-count = true
missing-argument = true
import-error = true
invalid-annotation = true
missing-attribute = false
not-callable = true
bad-return = true
bad-override = true
unbound-name = true
assert-type = true

[tool.flake8]
ignore = "E501"
max-line-length = 120
